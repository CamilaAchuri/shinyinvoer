% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-dropdownAction.R
\name{dropdownActionInput}
\alias{dropdownActionInput}
\title{Dropdown, choices with images and type: text, download link or action link}
\usage{
dropdownActionInput(
  inputId,
  label,
  choices,
  choicesType = "text",
  images = NA,
  width = 150
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the dropdown, \code{NULL} for no label.}

\item{choices}{Vector of values to select from. If named, then that name is displayed to the user and the value is the id of the input (in clase is not plain text but an action or download link). For dividing lines use "separator" in the choices' vector as name or value.}

\item{choicesType}{Vector indicating what HTML objects the choices are: download for download link; button for action link; text for plain text.}

\item{images}{Vector of paths for images that are going to be placed at the begining of each choice.}

\item{width}{Width in pixels of the dropdown.}
}
\description{
Dropdown, choices with images and type: text, download link or action link
}
\examples{
\dontrun{
## Only run examples in interactive R sessions
if (interactive()) {

choices <- c('Obtener enlace' = 'get_link', 'separator' = NA, 'Archivo HTML' = 'get_html')
ui <- fluidPage(
    dropdownActionInput(inputId = 'dropdown', label = 'Options', choices = choices, choicesType = c('button', NA, 'download'))
    verbatimTextOutput('count')
)
server <- function(input, output) {

output$count <- renderPrint({
                   HTML(paste0(input$dropdown, '</br>', input$get_link))
                })
}
shinyApp(ui, server)
}
}

}
